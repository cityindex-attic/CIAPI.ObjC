//
//  CIAPI<% code.write(objName) %>Request.m
//  CIAPI
//
//  Copyright 2011 Adam Wright/CityIndex. All rights reserved.
//

#import "CIAPI<% code.write(objName) %>Request.h"

<%
  // Handle the array parameter type hinting
  for (parameter in obj.arrayParameters)
  {
    if (obj.arrayParameters[parameter].arrayType.substring(0, 5) == "CIAPI")
    {
%>
#import "<% code.write(obj.arrayParameters[parameter].arrayType) %>.h"
<%
    }
  }
%>
<% if (obj.returns.substring(0, 2) != "NS") { %>
#import "<% code.write(obj.returns) %>.h"
<% } %>

@implementation <% code.write(apiName(objName)) %>Request

<% for (parameter in obj.parameters) { %>
@synthesize <% code.write(obj.parameters[parameter].name) %>;
<% } %>


<% if (obj.parameters.length > 0) { %>

- (<% code.write(apiName(objName)) %>Request*)initWith<% code.write(obj.constructorNameSuffix) %>
{
  self = [super init];

  if (self)
  {
<%  // For every non-default parameter, we need to assign it internally
    // For every default parameter, just assign the default
    for (paramIndex in obj.parameters)
    {
      var param = obj.parameters[paramIndex];
      if (param.hasDefault)
      {
        code.write("    self." + param.name + " = " + param.default + ";\n");
      }
      else
      {
          code.write("    self." + param.name + " = _" + param.name + ";\n");
      }
    } %>
  }

  return self;
}
<% } %>

// If we have array parameters, vend the array types from a function for
// automatic object construction
<% if (obj.arrayParameters.length > 0) { %>
- (Class)propertyTypeHintForName:(NSString*)name
{
<%
  for (arrayParam in obj.arrayParameters)
  {
%>
  if ([name isEqualToString:@"<% code.write(obj.arrayParameters[arrayParam].name) %>"]) return [<% code.write(obj.arrayParameters[arrayParam].arrayType) %> class];
<%
  }
%>
  return nil;
}
<% } %>

- (enum CIAPIRequestType)requestType
{
    return CIAPIRequest<% code.write(obj.transport) %>;
}

- (NSString*)urlTemplate
{
    return @"<% code.write(obj.target + obj.uriTemplate) %>";
}

- (Class)responseClass
{
    return [<% code.write(obj.returns) %> class];
}

<% if (obj.throttleScope) { %>
- (NSString*)throttleScope
{
    return @"<% code.write(obj.throttleScope); %>";
}
<% } %>

<% if (obj.hasCacheDuration) { %>
- (NSTimeInterval)cacheDuration
{
  return <% code.write(obj.cacheDuration / 1000) %>.0;
}
<% } %>

@end

<% fileName = "CIAPI" + objName + "Request.m" %>
